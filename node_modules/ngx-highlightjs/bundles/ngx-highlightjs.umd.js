(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('ngx-highlightjs', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/platform-browser'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-highlightjs'] = {}, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common, global.ng.platformBrowser));
}(this, (function (exports, i0, rxjs, operators, common, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var HIGHLIGHT_OPTIONS = new i0.InjectionToken('HIGHLIGHT_OPTIONS');

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    // @dynamic
    var HighlightLoader = /** @class */ (function () {
        function HighlightLoader(doc, platformId, _options) {
            var _this = this;
            this._options = _options;
            // Stream that emits when hljs library is loaded and ready to use
            this._ready = new rxjs.BehaviorSubject(null);
            this.ready = this._ready.asObservable().pipe(operators.filter(function (hljs) { return !!hljs; }), operators.map(function (hljs) { return hljs; }), operators.take(1));
            // Check if hljs is already available
            if (common.isPlatformBrowser(platformId) && doc.defaultView.hljs) {
                this._ready.next(doc.defaultView.hljs);
            }
            else {
                // Load hljs library
                this._loadLibrary().pipe(operators.switchMap(function (hljs) {
                    if (_this._options && _this._options.lineNumbersLoader) {
                        // Make hljs available on window object (required for the line numbers library)
                        doc.defaultView.hljs = hljs;
                        // Load line numbers library
                        return _this.loadLineNumbers().pipe(operators.tap(function () { return _this._ready.next(hljs); }));
                    }
                    else {
                        _this._ready.next(hljs);
                        return rxjs.EMPTY;
                    }
                }), operators.catchError(function (e) {
                    console.error('[HLJS] ', e);
                    return rxjs.EMPTY;
                })).subscribe();
            }
        }
        /**
         * Lazy-Load highlight.js library
         */
        HighlightLoader.prototype._loadLibrary = function () {
            var _this = this;
            if (this._options) {
                if (this._options.fullLibraryLoader && this._options.coreLibraryLoader) {
                    return rxjs.throwError('The full library and the core library were imported, only one of them should be imported!');
                }
                if (this._options.fullLibraryLoader && this._options.languages) {
                    return rxjs.throwError('The highlighting languages were imported they are not needed!');
                }
                if (this._options.coreLibraryLoader && !this._options.languages) {
                    return rxjs.throwError('The highlighting languages were not imported!');
                }
                if (!this._options.coreLibraryLoader && this._options.languages) {
                    return rxjs.throwError('The core library was not imported!');
                }
                if (this._options.fullLibraryLoader) {
                    return this.loadFullLibrary();
                }
                if (this._options.coreLibraryLoader && this._options.languages && Object.keys(this._options.languages).length) {
                    return this.loadCoreLibrary().pipe(operators.switchMap(function (hljs) { return _this._loadLanguages(hljs); }));
                }
            }
            return rxjs.throwError('Highlight.js library was not imported!');
        };
        /**
         * Lazy-load highlight.js languages
         */
        HighlightLoader.prototype._loadLanguages = function (hljs) {
            var languages = Object.entries(this._options.languages).map(function (_a) {
                var _b = __read(_a, 2), langName = _b[0], langLoader = _b[1];
                return importModule(langLoader()).pipe(operators.tap(function (langFunc) { return hljs.registerLanguage(langName, langFunc); }));
            });
            return rxjs.zip.apply(void 0, __spreadArray([], __read(languages))).pipe(operators.map(function () { return hljs; }));
        };
        /**
         * Import highlight.js core library
         */
        HighlightLoader.prototype.loadCoreLibrary = function () {
            return importModule(this._options.coreLibraryLoader());
        };
        /**
         * Import highlight.js library with all languages
         */
        HighlightLoader.prototype.loadFullLibrary = function () {
            return importModule(this._options.fullLibraryLoader());
        };
        /**
         * Import line numbers library
         */
        HighlightLoader.prototype.loadLineNumbers = function () {
            return importModule(this._options.lineNumbersLoader());
        };
        return HighlightLoader;
    }());
    HighlightLoader.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightLoader, deps: [{ token: common.DOCUMENT }, { token: i0.PLATFORM_ID }, { token: HIGHLIGHT_OPTIONS, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    HighlightLoader.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightLoader, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightLoader, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [common.DOCUMENT]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [HIGHLIGHT_OPTIONS]
                        }] }];
        } });
    /**
     * Map loader response to module object
     */
    var importModule = function (moduleLoader) {
        return rxjs.from(moduleLoader).pipe(operators.filter(function (module) { return !!module && !!module.default; }), operators.map(function (module) { return module.default; }));
    };

    var HighlightJS = /** @class */ (function () {
        function HighlightJS(_loader, options) {
            var _this = this;
            this._loader = _loader;
            this._hljs = null;
            // Load highlight.js library on init
            _loader.ready.subscribe(function (hljs) {
                _this._hljs = hljs;
                if (options && options.config) {
                    // Set global config if present
                    hljs.configure(options.config);
                    if (hljs.listLanguages().length < 1) {
                        console.error('[HighlightJS]: No languages were registered!');
                    }
                }
            });
        }
        Object.defineProperty(HighlightJS.prototype, "hljs", {
            // A reference for hljs library
            get: function () {
                return this._hljs;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Core highlighting function. Accepts the code to highlight (string) and a list of options (object)
         * @param code Accepts the code to highlight
         * @param language must be present and specify the language name or alias of the grammar to be used for highlighting
         * @param ignoreIllegals (optional) when set to true it forces highlighting to finish even in case of detecting illegal syntax for the language instead of throwing an exception.
         */
        HighlightJS.prototype.highlight = function (code, _a) {
            var language = _a.language, ignoreIllegals = _a.ignoreIllegals;
            return this._loader.ready.pipe(operators.map(function (hljs) { return hljs.highlight(code, { language: language, ignoreIllegals: ignoreIllegals }); }));
        };
        /**
         * Highlighting with language detection.
         * @param value Accepts a string with the code to highlight
         * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
         * The subset can also be set with configure, but the local parameter overrides the option if set.
         */
        HighlightJS.prototype.highlightAuto = function (value, languageSubset) {
            return this._loader.ready.pipe(operators.map(function (hljs) { return hljs.highlightAuto(value, languageSubset); }));
        };
        /**
         * Applies highlighting to a DOM node containing code.
         * This function is the one to use to apply highlighting dynamically after page load or within initialization code of third-party JavaScript frameworks.
         * The function uses language detection by default but you can specify the language in the class attribute of the DOM node. See the scopes reference for all available language names and scopes.
         * @param element
         */
        HighlightJS.prototype.highlightElement = function (element) {
            return this._loader.ready.pipe(operators.map(function (hljs) { return hljs.highlightElement(element); }));
        };
        /**
         * Applies highlighting to all elements on a page matching the configured cssSelector. The default cssSelector value is 'pre code',
         * which highlights all code blocks. This can be called before or after the page’s onload event has fired.
         */
        HighlightJS.prototype.highlightAll = function () {
            return this._loader.ready.pipe(operators.map(function (hljs) { return hljs.highlightAll(); }));
        };
        /**
         * @deprecated in version 12
         * Configures global options:
         * @param config HighlightJs configuration argument
         */
        HighlightJS.prototype.configure = function (config) {
            return this._loader.ready.pipe(operators.map(function (hljs) { return hljs.configure(config); }));
        };
        /**
         * Adds new language to the library under the specified name. Used mostly internally.
         * @param languageName A string with the name of the language being registered
         * @param languageDefinition A function that returns an object which represents the language definition.
         * The function is passed the hljs object to be able to use common regular expressions defined within it.
         */
        HighlightJS.prototype.registerLanguage = function (languageName, languageDefinition) {
            return this._loader.ready.pipe(operators.tap(function (hljs) { return hljs.registerLanguage(languageName, languageDefinition); }));
        };
        /**
         * Removes a language and its aliases from the library. Used mostly internall
         * @param languageName: a string with the name of the language being removed.
         */
        HighlightJS.prototype.unregisterLanguage = function (languageName) {
            return this._loader.ready.pipe(operators.tap(function (hljs) { return hljs.unregisterLanguage(languageName); }));
        };
        /**
         * Adds new language alias or aliases to the library for the specified language name defined under languageName key.
         * @param alias: A string or array with the name of alias being registered
         * @param languageName: the language name as specified by registerLanguage.
         */
        HighlightJS.prototype.registerAliases = function (alias, _a) {
            var languageName = _a.languageName;
            return this._loader.ready.pipe(operators.tap(function (hljs) { return hljs.registerAliases(alias, { languageName: languageName }); }));
        };
        /**
         * @return The languages names list.
         */
        HighlightJS.prototype.listLanguages = function () {
            return this._loader.ready.pipe(operators.map(function (hljs) { return hljs.listLanguages(); }));
        };
        /**
         * Looks up a language by name or alias.
         * @param name Language name
         * @return The language object if found, undefined otherwise.
         */
        HighlightJS.prototype.getLanguage = function (name) {
            return this._loader.ready.pipe(operators.map(function (hljs) { return hljs.getLanguage(name); }));
        };
        /**
         * Enables safe mode. This is the default mode, providing the most reliable experience for production usage.
         */
        HighlightJS.prototype.safeMode = function () {
            return this._loader.ready.pipe(operators.map(function (hljs) { return hljs.safeMode(); }));
        };
        /**
         * Enables debug/development mode.
         */
        HighlightJS.prototype.debugMode = function () {
            return this._loader.ready.pipe(operators.map(function (hljs) { return hljs.debugMode(); }));
        };
        /**
         * Display line numbers
         * @param el Code element
         */
        HighlightJS.prototype.lineNumbersBlock = function (el) {
            return this._loader.ready.pipe(operators.filter(function (hljs) { return !!hljs.lineNumbersBlock; }), operators.tap(function (hljs) { return hljs.lineNumbersBlock(el); }));
        };
        return HighlightJS;
    }());
    HighlightJS.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightJS, deps: [{ token: HighlightLoader }, { token: HIGHLIGHT_OPTIONS, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    HighlightJS.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightJS, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightJS, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: HighlightLoader }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [HIGHLIGHT_OPTIONS]
                        }] }];
        } });

    var Highlight = /** @class */ (function () {
        function Highlight(el, _hljs, _sanitizer, _options) {
            this._hljs = _hljs;
            this._sanitizer = _sanitizer;
            this._options = _options;
            // Stream that emits when code string is highlighted
            this.highlighted = new i0.EventEmitter();
            this._nativeElement = el.nativeElement;
        }
        Highlight.prototype.ngOnChanges = function (changes) {
            var _a;
            if (this.code &&
                ((_a = changes === null || changes === void 0 ? void 0 : changes.code) === null || _a === void 0 ? void 0 : _a.currentValue) &&
                changes.code.currentValue !== changes.code.previousValue) {
                this.highlightElement(this.code, this.languages);
            }
        };
        /**
         * Highlighting with language detection and fix markup.
         * @param code Accepts a string with the code to highlight
         * @param languages An optional array of language names and aliases restricting detection to only those languages.
         * The subset can also be set with configure, but the local parameter overrides the option if set.
         */
        Highlight.prototype.highlightElement = function (code, languages) {
            var _this = this;
            // Set code text before highlighting
            this.setTextContent(code);
            this._hljs.highlightAuto(code, languages).subscribe(function (res) {
                // Set highlighted code
                _this.setInnerHTML(res.value || null);
                // Check if user want to show line numbers
                if (_this.lineNumbers && _this._options && _this._options.lineNumbersLoader) {
                    _this.addLineNumbers();
                }
                // Forward highlight response to the highlighted output
                _this.highlighted.emit(res);
            });
        };
        Highlight.prototype.addLineNumbers = function () {
            var _this = this;
            // Clean up line numbers observer
            this.destroyLineNumbersObserver();
            rxjs.animationFrameScheduler.schedule(function () {
                // Add line numbers
                _this._hljs.lineNumbersBlock(_this._nativeElement).subscribe();
                // If lines count is 1, the line numbers library will not add numbers
                // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element
                _this._lineNumbersObs = new MutationObserver(function () {
                    if (_this._nativeElement.firstElementChild && _this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {
                        _this._nativeElement.classList.add('hljs-line-numbers');
                    }
                    _this.destroyLineNumbersObserver();
                });
                _this._lineNumbersObs.observe(_this._nativeElement, { childList: true });
            });
        };
        Highlight.prototype.destroyLineNumbersObserver = function () {
            if (this._lineNumbersObs) {
                this._lineNumbersObs.disconnect();
                this._lineNumbersObs = null;
            }
        };
        Highlight.prototype.setTextContent = function (content) {
            var _this = this;
            rxjs.animationFrameScheduler.schedule(function () { return _this._nativeElement.textContent = content; });
        };
        Highlight.prototype.setInnerHTML = function (content) {
            var _this = this;
            rxjs.animationFrameScheduler.schedule(function () { return _this._nativeElement.innerHTML = _this._sanitizer.sanitize(i0.SecurityContext.HTML, content) || ''; });
        };
        return Highlight;
    }());
    Highlight.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: Highlight, deps: [{ token: i0__namespace.ElementRef }, { token: HighlightJS }, { token: i2__namespace.DomSanitizer }, { token: HIGHLIGHT_OPTIONS, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    Highlight.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.2", type: Highlight, selector: "[highlight]", inputs: { code: ["highlight", "code"], languages: "languages", lineNumbers: "lineNumbers" }, outputs: { highlighted: "highlighted" }, host: { properties: { "class.hljs": "true" } }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: Highlight, decorators: [{
                type: i0.Directive,
                args: [{
                        host: {
                            '[class.hljs]': 'true'
                        },
                        selector: '[highlight]'
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef }, { type: HighlightJS }, { type: i2__namespace.DomSanitizer }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [HIGHLIGHT_OPTIONS]
                        }] }];
        }, propDecorators: { code: [{
                    type: i0.Input,
                    args: ['highlight']
                }], languages: [{
                    type: i0.Input
                }], lineNumbers: [{
                    type: i0.Input
                }], highlighted: [{
                    type: i0.Output
                }] } });

    var HighlightModule = /** @class */ (function () {
        function HighlightModule() {
        }
        return HighlightModule;
    }());
    HighlightModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    HighlightModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightModule, declarations: [Highlight], exports: [Highlight] });
    HighlightModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: HighlightModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [Highlight],
                        exports: [Highlight]
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.HIGHLIGHT_OPTIONS = HIGHLIGHT_OPTIONS;
    exports.Highlight = Highlight;
    exports.HighlightJS = HighlightJS;
    exports.HighlightLoader = HighlightLoader;
    exports.HighlightModule = HighlightModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-highlightjs.umd.js.map
