import { Directive, Input, Output, Inject, Optional, EventEmitter, SecurityContext } from '@angular/core';
import { animationFrameScheduler } from 'rxjs';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
import * as i0 from "@angular/core";
import * as i1 from "./highlight.service";
import * as i2 from "@angular/platform-browser";
export class Highlight {
    constructor(el, _hljs, _sanitizer, _options) {
        this._hljs = _hljs;
        this._sanitizer = _sanitizer;
        this._options = _options;
        // Stream that emits when code string is highlighted
        this.highlighted = new EventEmitter();
        this._nativeElement = el.nativeElement;
    }
    ngOnChanges(changes) {
        var _a;
        if (this.code &&
            ((_a = changes === null || changes === void 0 ? void 0 : changes.code) === null || _a === void 0 ? void 0 : _a.currentValue) &&
            changes.code.currentValue !== changes.code.previousValue) {
            this.highlightElement(this.code, this.languages);
        }
    }
    /**
     * Highlighting with language detection and fix markup.
     * @param code Accepts a string with the code to highlight
     * @param languages An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightElement(code, languages) {
        // Set code text before highlighting
        this.setTextContent(code);
        this._hljs.highlightAuto(code, languages).subscribe((res) => {
            // Set highlighted code
            this.setInnerHTML(res.value || null);
            // Check if user want to show line numbers
            if (this.lineNumbers && this._options && this._options.lineNumbersLoader) {
                this.addLineNumbers();
            }
            // Forward highlight response to the highlighted output
            this.highlighted.emit(res);
        });
    }
    addLineNumbers() {
        // Clean up line numbers observer
        this.destroyLineNumbersObserver();
        animationFrameScheduler.schedule(() => {
            // Add line numbers
            this._hljs.lineNumbersBlock(this._nativeElement).subscribe();
            // If lines count is 1, the line numbers library will not add numbers
            // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element
            this._lineNumbersObs = new MutationObserver(() => {
                if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {
                    this._nativeElement.classList.add('hljs-line-numbers');
                }
                this.destroyLineNumbersObserver();
            });
            this._lineNumbersObs.observe(this._nativeElement, { childList: true });
        });
    }
    destroyLineNumbersObserver() {
        if (this._lineNumbersObs) {
            this._lineNumbersObs.disconnect();
            this._lineNumbersObs = null;
        }
    }
    setTextContent(content) {
        animationFrameScheduler.schedule(() => this._nativeElement.textContent = content);
    }
    setInnerHTML(content) {
        animationFrameScheduler.schedule(() => this._nativeElement.innerHTML = this._sanitizer.sanitize(SecurityContext.HTML, content) || '');
    }
}
Highlight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: Highlight, deps: [{ token: i0.ElementRef }, { token: i1.HighlightJS }, { token: i2.DomSanitizer }, { token: HIGHLIGHT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
Highlight.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.2", type: Highlight, selector: "[highlight]", inputs: { code: ["highlight", "code"], languages: "languages", lineNumbers: "lineNumbers" }, outputs: { highlighted: "highlighted" }, host: { properties: { "class.hljs": "true" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: Highlight, decorators: [{
            type: Directive,
            args: [{
                    host: {
                        '[class.hljs]': 'true'
                    },
                    selector: '[highlight]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.HighlightJS }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [HIGHLIGHT_OPTIONS]
                }] }]; }, propDecorators: { code: [{
                type: Input,
                args: ['highlight']
            }], languages: [{
                type: Input
            }], lineNumbers: [{
                type: Input
            }], highlighted: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,