import { InjectionToken } from '@angular/core';
export const HIGHLIGHT_OPTIONS = new InjectionToken('HIGHLIGHT_OPTIONS');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWhpZ2hsaWdodGpzL3NyYy9saWIvaGlnaGxpZ2h0Lm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFxSS9DLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUFtQixtQkFBbUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBGdWxsIGRvY3VtZW50YXRpb24gaXMgYXZhaWxhYmxlIGhlcmUgaHR0cHM6Ly9oaWdobGlnaHRqcy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvYXBpLmh0bWxcbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIEhpZ2hsaWdodExpYnJhcnkge1xuXG4gIC8qKlxuICAgKiBDb3JlIGhpZ2hsaWdodGluZyBmdW5jdGlvbi4gQWNjZXB0cyB0aGUgY29kZSB0byBoaWdobGlnaHQgKHN0cmluZykgYW5kIGEgbGlzdCBvZiBvcHRpb25zIChvYmplY3QpXG4gICAqIEBwYXJhbSBjb2RlIEFjY2VwdHMgdGhlIGNvZGUgdG8gaGlnaGxpZ2h0XG4gICAqIEBwYXJhbSBsYW5ndWFnZSBtdXN0IGJlIHByZXNlbnQgYW5kIHNwZWNpZnkgdGhlIGxhbmd1YWdlIG5hbWUgb3IgYWxpYXMgb2YgdGhlIGdyYW1tYXIgdG8gYmUgdXNlZCBmb3IgaGlnaGxpZ2h0aW5nXG4gICAqIEBwYXJhbSBpZ25vcmVJbGxlZ2FscyAob3B0aW9uYWwpIHdoZW4gc2V0IHRvIHRydWUgaXQgZm9yY2VzIGhpZ2hsaWdodGluZyB0byBmaW5pc2ggZXZlbiBpbiBjYXNlIG9mIGRldGVjdGluZyBpbGxlZ2FsIHN5bnRheCBmb3IgdGhlIGxhbmd1YWdlIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxuICAgKi9cbiAgaGlnaGxpZ2h0KGNvZGU6IHN0cmluZywgeyBsYW5ndWFnZSwgaWdub3JlSWxsZWdhbHMgfTogeyBsYW5ndWFnZTogc3RyaW5nLCBpZ25vcmVJbGxlZ2FsczogYm9vbGVhbiB9KTogSGlnaGxpZ2h0UmVzdWx0O1xuXG4gIC8qKlxuICAgKiBIaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBkZXRlY3Rpb24uXG4gICAqIEBwYXJhbSB2YWx1ZSBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG8gaGlnaGxpZ2h0XG4gICAqIEBwYXJhbSBsYW5ndWFnZVN1YnNldCBBbiBvcHRpb25hbCBhcnJheSBvZiBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcyByZXN0cmljdGluZyBkZXRlY3Rpb24gdG8gb25seSB0aG9zZSBsYW5ndWFnZXMuXG4gICAqIFRoZSBzdWJzZXQgY2FuIGFsc28gYmUgc2V0IHdpdGggY29uZmlndXJlLCBidXQgdGhlIGxvY2FsIHBhcmFtZXRlciBvdmVycmlkZXMgdGhlIG9wdGlvbiBpZiBzZXQuXG4gICAqL1xuICBoaWdobGlnaHRBdXRvKHZhbHVlOiBzdHJpbmcsIGxhbmd1YWdlU3Vic2V0OiBzdHJpbmdbXSk6IEhpZ2hsaWdodEF1dG9SZXN1bHQ7XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGEgRE9NIG5vZGUgY29udGFpbmluZyBjb2RlLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHRoZSBvbmUgdG8gdXNlIHRvIGFwcGx5IGhpZ2hsaWdodGluZyBkeW5hbWljYWxseSBhZnRlciBwYWdlIGxvYWQgb3Igd2l0aGluIGluaXRpYWxpemF0aW9uIGNvZGUgb2YgdGhpcmQtcGFydHlcbiAgICogSmF2YVNjcmlwdCBmcmFtZXdvcmtzLlxuICAgKiBUaGUgZnVuY3Rpb24gdXNlcyBsYW5ndWFnZSBkZXRlY3Rpb24gYnkgZGVmYXVsdCBidXQgeW91IGNhbiBzcGVjaWZ5IHRoZSBsYW5ndWFnZSBpbiB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIHRoZSBET00gbm9kZS5cbiAgICogU2VlIHRoZSBzY29wZXMgcmVmZXJlbmNlIGZvciBhbGwgYXZhaWxhYmxlIGxhbmd1YWdlIG5hbWVzIGFuZCBzY29wZXMuXG4gICAqIEBwYXJhbSBlbGVtZW50IEVsZW1lbnQgdG8gaGlnaGxpZ2h0XG4gICAqL1xuICBoaWdobGlnaHRFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZDtcblxuICAvKipcbiAgICogQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gYWxsIGVsZW1lbnRzIG9uIGEgcGFnZSBtYXRjaGluZyB0aGUgY29uZmlndXJlZCBjc3NTZWxlY3Rvci4gVGhlIGRlZmF1bHQgY3NzU2VsZWN0b3IgdmFsdWUgaXMgJ3ByZSBjb2RlJyxcbiAgICogd2hpY2ggaGlnaGxpZ2h0cyBhbGwgY29kZSBibG9ja3MuIFRoaXMgY2FuIGJlIGNhbGxlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlIHBhZ2XigJlzIG9ubG9hZCBldmVudCBoYXMgZmlyZWQuXG4gICAqL1xuICBoaWdobGlnaHRBbGwoKTogdm9pZDtcblxuICAvKipcbiAgICogQ29uZmlndXJlcyBnbG9iYWwgb3B0aW9uczpcbiAgICogQHBhcmFtIGNvbmZpZyBIaWdobGlnaHRKcyBjb25maWd1cmF0aW9uIGFyZ3VtZW50XG4gICAqL1xuICBjb25maWd1cmUoY29uZmlnOiBIaWdobGlnaHRDb25maWcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBBZGRzIG5ldyBsYW5ndWFnZSB0byB0aGUgbGlicmFyeSB1bmRlciB0aGUgc3BlY2lmaWVkIG5hbWUuIFVzZWQgbW9zdGx5IGludGVybmFsbHkuXG4gICAqIEBwYXJhbSBsYW5ndWFnZU5hbWUgQSBzdHJpbmcgd2l0aCB0aGUgbmFtZSBvZiB0aGUgbGFuZ3VhZ2UgYmVpbmcgcmVnaXN0ZXJlZFxuICAgKiBAcGFyYW0gbGFuZ3VhZ2VEZWZpbml0aW9uIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIG9iamVjdCB3aGljaCByZXByZXNlbnRzIHRoZSBsYW5ndWFnZSBkZWZpbml0aW9uLlxuICAgKiBUaGUgZnVuY3Rpb24gaXMgcGFzc2VkIHRoZSBobGpzIG9iamVjdCB0byBiZSBhYmxlIHRvIHVzZSBjb21tb24gcmVndWxhciBleHByZXNzaW9ucyBkZWZpbmVkIHdpdGhpbiBpdC5cbiAgICovXG4gIHJlZ2lzdGVyTGFuZ3VhZ2UobGFuZ3VhZ2VOYW1lOiBzdHJpbmcsIGxhbmd1YWdlRGVmaW5pdGlvbjogKCkgPT4gYW55KTogdm9pZDtcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGxhbmd1YWdlIGFuZCBpdHMgYWxpYXNlcyBmcm9tIHRoZSBsaWJyYXJ5LiBVc2VkIG1vc3RseSBpbnRlcm5hbGxcbiAgICogQHBhcmFtIGxhbmd1YWdlTmFtZTogYSBzdHJpbmcgd2l0aCB0aGUgbmFtZSBvZiB0aGUgbGFuZ3VhZ2UgYmVpbmcgcmVtb3ZlZC5cbiAgICovXG4gIHVucmVnaXN0ZXJMYW5ndWFnZShsYW5ndWFnZU5hbWU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEFkZHMgbmV3IGxhbmd1YWdlIGFsaWFzIG9yIGFsaWFzZXMgdG8gdGhlIGxpYnJhcnkgZm9yIHRoZSBzcGVjaWZpZWQgbGFuZ3VhZ2UgbmFtZSBkZWZpbmVkIHVuZGVyIGxhbmd1YWdlTmFtZSBrZXkuXG4gICAqIEBwYXJhbSBhbGlhczogQSBzdHJpbmcgb3IgYXJyYXkgd2l0aCB0aGUgbmFtZSBvZiBhbGlhcyBiZWluZyByZWdpc3RlcmVkXG4gICAqIEBwYXJhbSBsYW5ndWFnZU5hbWU6IHRoZSBsYW5ndWFnZSBuYW1lIGFzIHNwZWNpZmllZCBieSByZWdpc3Rlckxhbmd1YWdlLlxuICAgKi9cbiAgcmVnaXN0ZXJBbGlhc2VzKGFsaWFzOiBzdHJpbmcgfCBzdHJpbmdbXSwgeyBsYW5ndWFnZU5hbWUgfTogeyBsYW5ndWFnZU5hbWU6IHN0cmluZyB9KTogdm9pZDtcblxuICAvKipcbiAgICogQHJldHVybiBUaGUgbGFuZ3VhZ2VzIG5hbWVzIGxpc3QuXG4gICAqL1xuICBsaXN0TGFuZ3VhZ2VzKCk6IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBMb29rcyB1cCBhIGxhbmd1YWdlIGJ5IG5hbWUgb3IgYWxpYXMuXG4gICAqIEBwYXJhbSBuYW1lIExhbmd1YWdlIG5hbWVcbiAgICogQHJldHVybiBUaGUgbGFuZ3VhZ2Ugb2JqZWN0IGlmIGZvdW5kLCB1bmRlZmluZWQgb3RoZXJ3aXNlLlxuICAgKi9cbiAgZ2V0TGFuZ3VhZ2UobmFtZTogc3RyaW5nKTogYW55O1xuXG4gIC8qKlxuICAgKiBFbmFibGVzIHNhZmUgbW9kZS4gVGhpcyBpcyB0aGUgZGVmYXVsdCBtb2RlLCBwcm92aWRpbmcgdGhlIG1vc3QgcmVsaWFibGUgZXhwZXJpZW5jZSBmb3IgcHJvZHVjdGlvbiB1c2FnZS5cbiAgICovXG4gIHNhZmVNb2RlKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgZGVidWcvZGV2ZWxvcG1lbnQgbW9kZS5cbiAgICovXG4gIGRlYnVnTW9kZSgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBBZGQgbGluZSBudW1iZXJzIHRvIGNvZGUgZWxlbWVudFxuICAgKiBAcGFyYW0gZWwgQ29kZSBlbGVtZW50XG4gICAqL1xuICBsaW5lTnVtYmVyc0Jsb2NrKGVsOiBFbGVtZW50KTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBIaWdobGlnaHRDb25maWcge1xuICAvKiogY2xhc3NQcmVmaXg6IGEgc3RyaW5nIHByZWZpeCBhZGRlZCBiZWZvcmUgY2xhc3MgbmFtZXMgaW4gdGhlIGdlbmVyYXRlZCBtYXJrdXAsIHVzZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggc3R5bGVzaGVldHMuICovXG4gIGNsYXNzUHJlZml4Pzogc3RyaW5nO1xuICAvKiogbGFuZ3VhZ2VzOiBhbiBhcnJheSBvZiBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcyByZXN0cmljdGluZyBhdXRvIGRldGVjdGlvbiB0byBvbmx5IHRoZXNlIGxhbmd1YWdlcy4gKi9cbiAgbGFuZ3VhZ2VzPzogc3RyaW5nW107XG4gIC8qKiBsYW5ndWFnZURldGVjdFJlOiBhIHJlZ2V4IHRvIGNvbmZpZ3VyZSBob3cgQ1NTIGNsYXNzIG5hbWVzIG1hcCB0byBsYW5ndWFnZSAoYWxsb3dzIGNsYXNzIG5hbWVzIGxpa2Ugc2F5IGNvbG9yLWFzLXBocCB2cyB0aGUgZGVmYXVsdCBvZiBsYW5ndWFnZS1waHAsIGV0Yy4pICovXG4gIGxhbmd1YWdlRGV0ZWN0UmU6IHN0cmluZztcbiAgLyoqIG5vSGlnaGxpZ2h0UmU6IGEgcmVnZXggdG8gY29uZmlndXJlIHdoaWNoIENTUyBjbGFzc2VzIGFyZSB0byBiZSBza2lwcGVkIGNvbXBsZXRlbHkuICovXG4gIG5vSGlnaGxpZ2h0UmU6IHN0cmluZztcbiAgLyoqIGEgQ1NTIHNlbGVjdG9yIHRvIGNvbmZpZ3VyZSB3aGljaCBlbGVtZW50cyBhcmUgYWZmZWN0ZWQgYnkgaGxqcy5oaWdobGlnaHRBbGwuIERlZmF1bHRzIHRvICdwcmUgY29kZScuICovXG4gIGNzc1NlbGVjdG9yOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGlnaGxpZ2h0UmVzdWx0IHtcbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XG4gIHZhbHVlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICByZWxldmFuY2U/OiBudW1iZXI7XG4gIHRvcDogYW55O1xuICBjb2RlOiBzdHJpbmc7XG4gIGlsbGVnYWw6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGlnaGxpZ2h0QXV0b1Jlc3VsdCB7XG4gIGxhbmd1YWdlPzogc3RyaW5nO1xuICBzZWNvbmRCZXN0PzogYW55O1xuICB2YWx1ZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgcmVsZXZhbmNlPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhpZ2hsaWdodE9wdGlvbnMge1xuICBjb25maWc/OiBIaWdobGlnaHRDb25maWc7XG4gIGxhbmd1YWdlcz86IHsgW25hbWU6IHN0cmluZ106ICgpID0+IFByb21pc2U8YW55PiB9O1xuICBjb3JlTGlicmFyeUxvYWRlcj86ICgpID0+IFByb21pc2U8YW55PjtcbiAgZnVsbExpYnJhcnlMb2FkZXI/OiAoKSA9PiBQcm9taXNlPGFueT47XG4gIGxpbmVOdW1iZXJzTG9hZGVyPzogKCkgPT4gUHJvbWlzZTxhbnk+O1xufVxuXG5leHBvcnQgY29uc3QgSElHSExJR0hUX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48SGlnaGxpZ2h0T3B0aW9ucz4oJ0hJR0hMSUdIVF9PUFRJT05TJyk7XG4iXX0=