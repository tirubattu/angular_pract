import { Directive, Pipe, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./code-loader";
export class GistDirective {
    constructor(_loader) {
        this._loader = _loader;
        this.gistLoad = new EventEmitter();
    }
    set gist(value) {
        if (value) {
            this._loader.getCodeFromGist(value).subscribe((gist) => this.gistLoad.emit(gist));
        }
    }
}
GistDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: GistDirective, deps: [{ token: i1.CodeLoader }], target: i0.ɵɵFactoryTarget.Directive });
GistDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.2", type: GistDirective, selector: "[gist]", inputs: { gist: "gist" }, outputs: { gistLoad: "gistLoad" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: GistDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[gist]'
                }]
        }], ctorParameters: function () { return [{ type: i1.CodeLoader }]; }, propDecorators: { gist: [{
                type: Input
            }], gistLoad: [{
                type: Output
            }] } });
export class GistFilePipe {
    transform(gist, fileName) {
        return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;
    }
}
GistFilePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: GistFilePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
GistFilePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: GistFilePipe, name: "gistFile" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: GistFilePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'gistFile'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1oaWdobGlnaHRqcy9wbHVzL3NyYy9naXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWlCLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBTzVGLE1BQU0sT0FBTyxhQUFhO0lBRXhCLFlBQW9CLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFVN0IsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFUOUMsQ0FBQztJQUVELElBQ1ksSUFBSSxDQUFDLEtBQWE7UUFDNUIsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDekY7SUFDSCxDQUFDOzswR0FWVSxhQUFhOzhGQUFiLGFBQWE7MkZBQWIsYUFBYTtrQkFIekIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsUUFBUTtpQkFDbkI7aUdBT2EsSUFBSTtzQkFEZixLQUFLO2dCQU9JLFFBQVE7c0JBQWpCLE1BQU07O0FBTVQsTUFBTSxPQUFPLFlBQVk7SUFDdkIsU0FBUyxDQUFDLElBQVUsRUFBRSxRQUFnQjtRQUNwQyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzVGLENBQUM7O3lHQUhVLFlBQVk7dUdBQVosWUFBWTsyRkFBWixZQUFZO2tCQUh4QixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxVQUFVO2lCQUNqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgUGlwZSwgSW5wdXQsIE91dHB1dCwgUGlwZVRyYW5zZm9ybSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2RlTG9hZGVyIH0gZnJvbSAnLi9jb2RlLWxvYWRlcic7XG5pbXBvcnQgeyBHaXN0IH0gZnJvbSAnLi9naXN0Lm1vZGVsJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2dpc3RdJ1xufSlcbmV4cG9ydCBjbGFzcyBHaXN0RGlyZWN0aXZlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9sb2FkZXI6IENvZGVMb2FkZXIpIHtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHByaXZhdGUgc2V0IGdpc3QodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5fbG9hZGVyLmdldENvZGVGcm9tR2lzdCh2YWx1ZSkuc3Vic2NyaWJlKChnaXN0OiBHaXN0KSA9PiB0aGlzLmdpc3RMb2FkLmVtaXQoZ2lzdCkpO1xuICAgIH1cbiAgfVxuXG4gIEBPdXRwdXQoKSBnaXN0TG9hZCA9IG5ldyBFdmVudEVtaXR0ZXI8R2lzdD4oKTtcbn1cblxuQFBpcGUoe1xuICBuYW1lOiAnZ2lzdEZpbGUnXG59KVxuZXhwb3J0IGNsYXNzIEdpc3RGaWxlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oZ2lzdDogR2lzdCwgZmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiAoZ2lzdCAmJiBnaXN0LmZpbGVzICYmIGdpc3QuZmlsZXNbZmlsZU5hbWVdKSA/IGdpc3QuZmlsZXNbZmlsZU5hbWVdLmNvbnRlbnQgOiBudWxsO1xuICB9XG59XG4iXX0=